(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{136:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=i,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return n?a.a.createElement(f,r(r({ref:t},s),{},{components:n})):a.a.createElement(f,r({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,c[1]=r;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},164:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/0-740c1be0cf0101eaa22ba956d6ca2c9d.png"},165:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/1-3fa2e75d8a45d07114c35b68f7dac88e.png"},166:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/2-316a0fc9783751ba10f6c00afb414648.png"},167:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/3-3ab0cd37ca8592aa4f2f2271fddb5789.png"},168:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/4-4a98fc4fa1ce0a49027d1249d5d6d573.png"},169:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/5-37da5508b009f0be6b3643bad2f0ddc1.png"},170:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/6-c0b6f394b416659e9e5eeaa7921dec01.png"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(3),a=n(7),o=(n(0),n(136)),c={id:"iOS_RichView",title:"RichView Notification Support",sidebar_label:"RichView Notification Support"},r={unversionedId:"iOS_RichView",id:"iOS_RichView",isDocsHomePage:!1,title:"RichView Notification Support",description:"iOS SDK of Diyalog Messaging Platform",source:"@site/../docs/iOS_RichView.md",slug:"/iOS_RichView",permalink:"/docs/iOS_RichView",version:"current",sidebar_label:"RichView Notification Support",sidebar:"docs",previous:{title:"Token Base Authentication",permalink:"/docs/iOS_TokenBaseAuthentication"},next:{title:"Details steps to add DiyalogSDK Cordova plugin to ionic application",permalink:"/docs/cordova_HowToUseCordova"}},l=[{value:"iOS SDK of Diyalog Messaging Platform",id:"ios-sdk-of-diyalog-messaging-platform",children:[{value:"<strong>Richiew Notificaion Support</strong>",id:"richiew-notificaion-support",children:[]},{value:"<strong>Select NotificationServiceExtension</strong>",id:"select-notificationserviceextension",children:[]},{value:"<strong>Select NotificationContentExtension</strong>",id:"select-notificationcontentextension",children:[]}]}],s={toc:l};function b(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},s,c,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"ios-sdk-of-diyalog-messaging-platform"},"iOS SDK of Diyalog Messaging Platform"),Object(o.b)("p",null,"Diyalog SDK is used for enabling messaging for your application. It is a multi-platform communication Messaging SDK for mobile and web. It is easy to integrate, save development cost and delight users with a stable, secure and customization messaging."),Object(o.b)("h3",{id:"richiew-notificaion-support"},Object(o.b)("strong",{parentName:"h3"},"Richiew Notificaion Support")),Object(o.b)("p",null,"How to add Richview Notification support to your app"),Object(o.b)("p",null,"Here is the steps for it."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Go to project expolrar.")),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(164).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Add target -> Select "Notification Content Extension".')),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(165).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Give it proper name and press "finish".')),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(166).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"It will ask for activate to scheme so activate it.")),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(167).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Add target -> Select "Notification Service Extension".')),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(168).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Give it proper name and press "finish".')),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(169).default})),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"It will ask for activate to scheme so activate it.")),Object(o.b)("p",null,Object(o.b)("img",{alt:"Capabilities",src:n(170).default})),Object(o.b)("p",null,"Add DiyalogEngine Framework in both Extension"),Object(o.b)("p",null,"For that go to project explorar"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Select NotificationContentExtension target"),Object(o.b)("li",{parentName:"ul"},'Go "Linked Frameworks and Libraries"'),Object(o.b)("li",{parentName:"ul"},"Click Add(+) and choose DiyalogEngine.Framework  7.png"),Object(o.b)("li",{parentName:"ul"},"Same Way add for NotificationServiceExtension    8.png")),Object(o.b)("h3",{id:"select-notificationserviceextension"},Object(o.b)("strong",{parentName:"h3"},"Select NotificationServiceExtension")),Object(o.b)("p",null,"Go to NotificationService.swift and import DiyalogEngine"),Object(o.b)("p",null,"Replace this method  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n}\n")),Object(o.b)("p",null,"With this method"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},' override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        self.contentHandler = contentHandler\n        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n\n        if let bestAttemptContent = bestAttemptContent {\n            // Modify the notification content here...\n            bestAttemptContent.title = "\\(bestAttemptContent.title) [modified]"\n\n            // Call method to download notification content\n            DiyalogEngine.diyalogInstance().didRecieveNotification(bestAttemptContent, withContentHandler: { (attemptContent) in\n                    contentHandler(bestAttemptContent)\n            })\n\n        }\n    }\n\n')),Object(o.b)("h3",{id:"select-notificationcontentextension"},Object(o.b)("strong",{parentName:"h3"},"Select NotificationContentExtension")),Object(o.b)("p",null,"Go to NotificationViewController.swift  And"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"import DiyalogEngine\n\nimport AVFoundation\n")),Object(o.b)("p",null,"Remove\n",Object(o.b)("inlineCode",{parentName:"p"},"@IBOutlet var label: UILabel?  ")),Object(o.b)("p",null,"Replace this method  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"func didReceive(_ notification: UNNotification) {\n}\n")),Object(o.b)("p",null,"With this method"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"  func didReceive(_ notification: UNNotification) {\n\n        // Call method to load image view or player view\n        if #available(iOS 10.0, *) {\n            DiyalogEngine.diyalogInstance().didReceive(notification: notification, superView: self.view) { (uiView, avPlayer, avAudioPlayer)  in\n                if avPlayer != nil {\n                    DispatchQueue.main.async {\n                        avPlayer?.play()\n                    }\n                } else if avAudioPlayer != nil {\n                    DispatchQueue.main.async {\n                        avAudioPlayer?.play()\n                    }\n                }\n            }\n        } else {\n            // Fallback on earlier versions\n        }\n    }\n")))}b.isMDXComponent=!0}}]);