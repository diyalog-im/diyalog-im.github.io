(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{152:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),l=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=l(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=l(n),d=a,u=b["".concat(i,".").concat(d)]||b[d]||g[d]||r;return n?o.a.createElement(u,p(p({ref:t},c),{},{components:n})):o.a.createElement(u,p({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},165:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/capabilities-c905cbdb7ada7f14c5f7a3b50003f5f2.png"},166:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/backgroundmodes-5a9394b4e630f828400537a82a1a6d16.png"},68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(7),r=(n(0),n(152)),i={id:"iOS_getting_started",title:"How to use Diyalog IOS SDK",sidebar_label:"How to use Diyalog"},p={unversionedId:"iOS_getting_started",id:"iOS_getting_started",isDocsHomePage:!1,title:"How to use Diyalog IOS SDK",description:"Diyalog SDK is used for enabling messaging for your application. It is a multi-platform communication Messaging SDK for mobile and web. It is easy to integrate, save development cost and delight users with a stable, secure and customization messaging.",source:"@site/../docs/iOS_getting_started.md",slug:"/iOS_getting_started",permalink:"/docs/iOS_getting_started",version:"current",sidebar_label:"How to use Diyalog",sidebar:"docs",previous:{title:"Token Base Authentication",permalink:"/docs/android_tokenBaseAuth"},next:{title:"Configure your SDK",permalink:"/docs/ios_configuration"}},s=[{value:"<strong>SDK Supports</strong>",id:"sdk-supports",children:[]},{value:"Integration Steps",id:"integration-steps",children:[]}],c={toc:s};function l(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Diyalog SDK is used for enabling messaging for your application. It is a multi-platform communication Messaging SDK for mobile and web. It is easy to integrate, save development cost and delight users with a stable, secure and customization messaging."),Object(r.b)("h2",{id:"sdk-supports"},Object(r.b)("strong",{parentName:"h2"},"SDK Supports")),Object(r.b)("p",null,"Diyalog SDK supported with iOS 10.0 & Above"),Object(r.b)("h2",{id:"integration-steps"},"Integration Steps"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Step 1: Adding DiyalogEngine to your project")),Object(r.b)("p",null,"You need to add DiyalogEngine and their dependencies j2objc, webrtc and opus frameworks to your project.",Object(r.b)("br",{parentName:"p"}),"\n","DiyalogEngine framework and its dependencies started to be published as xcframework. You need to add it to your project as Xcframework.",Object(r.b)("br",{parentName:"p"}),"\n","The dependent j2objc should not be embedded in the application package. This framework is required for your application to be compiled with DiyalogEngine. Other WenRTC and opus frameworkers must be embed.  "),Object(r.b)("p",null,"You have 3 choices to add DiyalogEngine framework and dependency frameworks to your project."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Using Manually Adding Frameworks")),Object(r.b)("p",{parentName:"li"},"  You can directly download frameworks from following links and add your project manually."),Object(r.b)("p",{parentName:"li"},"  DiyalogEngine : ",Object(r.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/ios_frameworks/DiyalogEngine/***version-no**/DiyalogEngine.zip"},"https://diyalog.im/app/pkgs/ios_frameworks/DiyalogEngine/***version-no**/DiyalogEngine.zip"),"  "),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"*version-no : You should be update with current stable version number.")),Object(r.b)("p",{parentName:"li"},"  Other Dependencies :",Object(r.b)("br",{parentName:"p"}),"\n","j2objc : ",Object(r.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/ios_frameworks/j2objc/1.0.3/j2objc.zip"},"https://diyalog.im/app/pkgs/ios_frameworks/j2objc/1.0.3/j2objc.zip"),Object(r.b)("br",{parentName:"p"}),"\n","WebRtC : ",Object(r.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/ios_frameworks/WebRTC/1.1.2941/WebRTC.zip"},"https://diyalog.im/app/pkgs/ios_frameworks/WebRTC/1.1.2941/WebRTC.zip"),Object(r.b)("br",{parentName:"p"}),"\n","opus   : ",Object(r.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/ios_frameworks/opus/1.3/opus.zip"},"https://diyalog.im/app/pkgs/ios_frameworks/opus/1.3/opus.zip"),"  "))),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Using Carthage")),Object(r.b)("p",{parentName:"li"},"  Create or add your Cartfile with following lines of dependency definitions"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'binary "https://diyalog.im/app/pkgs/ios_frameworks/DiyalogEngine.json" == version-no\n')),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"*version-no : You should be update with current stable version number.")),Object(r.b)("p",{parentName:"li"},"  Other Dependencies :"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'binary "https://diyalog.im/app/pkgs/ios_frameworks/WebRTC.json" == 1.1.2941\nbinary "https://diyalog.im/app/pkgs/ios_frameworks/j2objc.json" == 1.0.3\nbinary "https://diyalog.im/app/pkgs/ios_frameworks/opus.json" == 1.3\n')),Object(r.b)("p",{parentName:"li"},"  then update carthage of your project by following command.  "),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"carthage update --use-xcframeworks\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Using CocoaPods")),Object(r.b)("p",{parentName:"li"},"  The following dependencies need to be added to your PodFile file."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"pod 'DiyalogEngine', :git => 'https://github.com/diyalog-im/DiyalogEngine.git', :tag => '*version-no'\npod 'j2objc', :git => 'https://github.com/diyalog-im/j2objc.git', :tag => '1.0.3'  \npod 'WebRTC', :git => 'https://github.com/diyalog-im/WebRTC.git', :tag => '1.1.2941'\npod 'opus', :git => 'https://github.com/diyalog-im/opus.git', :tag => '1.3'\n")),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"*version-no : You should be update with current stable version number.")),Object(r.b)("p",{parentName:"li"},"  In addition, please add following script to the end of your podfile after replacing ",Object(r.b)("strong",{parentName:"p"},"Your-Target-Name")," with your project target name."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'post_install do |installer|\n    installer.pods_project.targets.each do |target|\n        if target.name == "Pods-**Your-Target-Name**"\n            target.build_configurations.each do |config|\n                xcconfig_path = config.base_configuration_reference.real_path\n                xcconfig = File.read(xcconfig_path)\n                xcconfig.sub!(\'-framework "j2objc"\', \'\')\n\n                File.open(xcconfig_path, "w") do |file|\n                    file << xcconfig\n                end\n            end\n        end\n    end\nend\n')),Object(r.b)("p",{parentName:"li"},"  then run pod install command in your project."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"pod install\n")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Step 2:"),"\nNeed to make required changes in Capabilities of the project as below:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Capabilities",src:n(165).default})),Object(r.b)("p",null,"And also background mode"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Backgroundmodes",src:n(166).default})),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Step 3:")," In your Project, open AppDelegate.swift file and import DiyalogEngine framework. Add override ",Object(r.b)("strong",{parentName:"p"},"init()")," method, Inside that method set below code.  "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'import UIKit\nimport DiyalogEngine\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    \n    override init(){\n        super.init();\n        \n        DiyalogEngine.diyalogInstance().endpoints = ["wss://<YOUR_DIYALOG_SERVER>"]\n\n        //Diyalog Test App\n        DiyalogEngine.diyalogInstance().apiId = <YOUR_APP_API_ID>\n        DiyalogEngine.diyalogInstance().apiKey = "<YOUR_APP_API_KEY>"\n        DiyalogEngine.diyalogInstance().trustedKeys = [\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_1>",\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_2>",\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_3>",\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_4>",\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_5>",\n            "<YOUR_DIYALOG_ENVIRONMENT_PUBLIC_KEY_6>"\n        ]\n        \n        \n        DiyalogEngine.diyalogInstance().setappName("<YOUR_APP_NAME>")\n        DiyalogEngine.diyalogInstance().setLocalizationLanguage(.turkish)\n        DiyalogEngine.diyalogInstance().setenableCalls(true)\n        \n        DiyalogEngine.diyalogInstance().setisSupportBackButton(true)\n        \n        DiyalogEngine.diyalogInstance().createDiyalog()\n                \n    }\n}\n')),Object(r.b)("p",null,"Now you are ready to use Diyalog SDK in your application.  You should read the next section about configuration parameters.\nDiyalog SDK gives you many customization in the chat views. You can learn details about styling Diyalog in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"/docs/iOS_style"},"styling document."))))}l.isMDXComponent=!0}}]);