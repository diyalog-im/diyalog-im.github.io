(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{116:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"Highlight",(function(){return c})),a.d(t,"HighlightWithBlack",(function(){return s})),a.d(t,"HighlightWithRed",(function(){return b})),a.d(t,"ColoredText",(function(){return d})),a.d(t,"CenteredText",(function(){return u})),a.d(t,"GreenColoredText",(function(){return p})),a.d(t,"BlueColoredText",(function(){return m})),a.d(t,"SmallText",(function(){return h})),a.d(t,"toc",(function(){return g})),a.d(t,"default",(function(){return j}));var n=a(3),r=a(7),o=(a(0),a(152)),l=(a(153),{id:"ios_video_help",title:"Starting Video Help",sidebar_label:"Video Help"}),i={unversionedId:"ios_video_help",id:"ios_video_help",isDocsHomePage:!1,title:"Starting Video Help",description:"<span",source:"@site/../docs/ios_video_help.md",slug:"/ios_video_help",permalink:"/docs/ios_video_help",version:"current",sidebar_label:"Video Help",sidebar:"docs",previous:{title:"RichView Notification Support",permalink:"/docs/iOS_RichView"},next:{title:"Starting Online Help",permalink:"/docs/ios_online_help"}},c=function(e){var t=e.children,a=e.color;return Object(o.b)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},s=function(e){var t=e.children,a=e.color;return Object(o.b)("span",{style:{backgroundColor:a,borderRadius:"2px",padding:"0.2rem"}},t)},b=function(e){var t=e.children,a=e.color;return Object(o.b)("span",{style:{color:"#d60b0b",backgroundColor:a,borderRadius:"2px",padding:"0.2rem"}},t)},d=function(e){var t=e.children,a=e.color;return Object(o.b)("span",{style:{color:a}},t)},u=function(e){var t=e.children;return Object(o.b)("span",{style:{align:"center"}},t)},p=function(e){var t=e.children;return Object(o.b)("span",{style:{color:"#42b72a"}},t)},m=function(e){var t=e.children;return Object(o.b)("span",{style:{color:"#1877F2"}},t)},h=function(e){var t=e.children;return Object(o.b)("span",{style:{fontSize:"smaller"}},t)},g=[{value:"Main Flow",id:"main-flow",children:[]},{value:"Picture In Picture Mode",id:"picture-in-picture-mode",children:[]},{value:"Receiving Data From Remote Party In a Call",id:"receiving-data-from-remote-party-in-a-call",children:[]},{value:"Sending Data To Remote Party In a Call",id:"sending-data-to-remote-party-in-a-call",children:[]},{value:"Sample IOS project",id:"sample-ios-project",children:[]}],O={Highlight:c,HighlightWithBlack:s,HighlightWithRed:b,ColoredText:d,CenteredText:u,GreenColoredText:p,BlueColoredText:m,SmallText:h,toc:g};function j(e){var t=e.components,l=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},O,l,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Diyalog Platform offers live assistance to your customers through your mobile application with video calls. "),Object(o.b)("p",null,"You can download full simple video call ios project from ",Object(o.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/demoapps/SimpleVideoCall_IOS.zip"},"SimpleVideoCall_IOS")," link.  "),Object(o.b)("h3",{id:"main-flow"},"Main Flow"),Object(o.b)("p",null,"First of all, you need to know the flow about video call help in Diyalog platform for anonymous users. Anonymous user means you can connect logged in or not logged in user with your representatives."),Object(o.b)("p",null,"The flow is like below :"),Object(o.b)("p",null,Object(o.b)("img",{src:a(213).default})),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Your app calls the DiyalogSDK ",Object(o.b)("strong",{parentName:"li"},"startVideoCallWithAttachedDataInBackground")," method. "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"startVideoCallWithAttachedDataInBackground")," connects Diyalog Server and server will add your video call request to  your representative queue then return to sdk about the result."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"startVideoCallWithAttachedDataInBackground")," works asyncronously and result of the method call will return to your app in a callback method."),Object(o.b)("li",{parentName:"ol"},"If inserting queue successfull then DiyalogSDK waits in background without showing any screen in your mobile app until a representative connecting . Therefore, you should show your wait screen thaht showing a representative will connect soon."),Object(o.b)("li",{parentName:"ol"},"If any represenatative connecting, DiyalogSDK will automatically starts video call and come into foreground. "),Object(o.b)("li",{parentName:"ol"},"After you retrun succecsfull result from ",Object(o.b)("strong",{parentName:"li"},"startVideoCallWithAttachedDataInBackground")," function, You can follow all stages of the video call by subscribing CallState in DiyalogSDK. So, you should subscribe to CallState by calling ",Object(o.b)("strong",{parentName:"li"},"subscribeToCallStateWithTxCodeEvent")," in DiyalogSDK.")),Object(o.b)("p",null,"According to your business needs, a video call can be started at the relevant stage of your application as follows. When the following method is called, the DiyalogSDK in the background will transmit the call request to the call center over the server, and it will be waiting in the background until a representative from the call center initiates the call. During this process, the standby screen should be displayed in your mobile application. Customers who are tired of waiting should be allowed to cancel the transaction by adding a cancellation option to the waiting screen."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'@objc open func startVideoCallWithAttachedDataInBackground(\n                                            idNumber : Int64,\n                                            customerId : String, \n                                            customerName : String = "", \n                                            phoneNumber : Int64 = 0, \n                                            txCode: String = "",  \n                                            attachedData: [ACAttachedData], \n                                            result: @escaping (Bool, ACVideoCallError?) -> Void)\n')),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Parameters"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"idNumber")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(Long)")," ",Object(o.b)("br",null),"National ID number of the customer."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"customerId")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(String)")," Customer id number. This can be real of candidate customer id."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"customerName")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(String)")," ",Object(o.b)("br",null),"Opsiyoneldir. ",Object(o.b)("br",null),"Name of the customer. This paramater is optional. It can be set empty."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"customerPhone")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(Long)")," ",Object(o.b)("br",null),"Opsiyoneldir. ",Object(o.b)("br",null),"Phone number of the customer. This paramater is optional. It can be set 0."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"txCode")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(String)")," This field is a parameter used only in the mobile client. The main application can distinguish the callState events of the its video calls in from other call.  CallState events related to the conversation status are returned to the main application with this txcode parameter. It is in no way migrated to the server or agent application."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"attachedData")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(ArrayList of AttachedData)")," ",Object(o.b)("br",null),"Opsiyoneldir. ",Object(o.b)("br",null),"With this parameter, you can send the data you want to the agent application. The Diyalog server transmits the data in the key-value array in this parameter to the Agent application. The data transmitted in this area is not stored on the Diyalog servers, only transmitted."))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)(h,{mdxType:"SmallText"},Object(o.b)(m,{mdxType:"BlueColoredText"},"result")," ",Object(o.b)(p,{mdxType:"GreenColoredText"},"(Bool, ACVideoCallError?)")," ",Object(o.b)("strong",{parentName:"td"},"startVideoCallWithAttachedDataInBackground")," method is an asynchronous method and sends the result (information that the call request has been started) to your application with this callback method. ",Object(o.b)("br",null),Object(o.b)("br",null),"If Bool value return true, the method successfull and means waiting in background to connect a repsresentative",Object(o.b)("br",null),"If Bool value return false, the method failed. And You can check failure reason from ACVideoCallError"))))),Object(o.b)("p",null,"You can use ",Object(o.b)("strong",{parentName:"p"},"startVideoCallWithAttachedDataInBackground")," method as shown in below code. First of all, you need to create an ArrayList that takes the data you want to pass in AttachedData class."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'var attachedData = [ACAttachedData]()\nattachedData.append(ACAttachedData.init(nsString: "dataName1", with: "dataValue1"))\nattachedData.append(ACAttachedData.init(nsString: "dataName2", with: "dataValue2"))\nattachedData.append(ACAttachedData.init(nsString: "dataName3", with: "dataValue3"))\nattachedData.append(ACAttachedData.init(nsString: "dataName4", with: "dataValue4"))\n')),Object(o.b)("p",null,"Then you need to pass this data in the attachedDataList parameter of the startVideoCallWithAttachedDataInBackground method."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'@objc open func startVideoCallWithAttachedDataInBackground(\n                                            idNumber : Int64,\n                                            customerId : String, \n                                            customerName : String = "", \n                                            phoneNumber : Int64 = 0, \n                                            txCode: String = "",  \n                                            attachedData: [ACAttachedData], \n                                            result: @escaping (Bool, ACVideoCallError?) -> Void)\n')),Object(o.b)("p",null,"If you get success as a ",Object(o.b)("strong",{parentName:"p"},"result")," from the ",Object(o.b)("strong",{parentName:"p"},"startVideoCallWithAttachedDataInBackground")," method, you need to subscribe to the event mechanism where you can follow the status of the call."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"@objc open func subscribeToCallStateWithTxCodeEvent(listener: @escaping (_ state: String, _ txCode: String) -> Void)\n")),Object(o.b)("p",null,"CallStates that can receive from DiyalogSDK after subscribe as follows:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"}," ",Object(o.b)("strong",{parentName:"p"},'"RINGING"'),"                : Phone is calling",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"CONNECTING"'),"              : Call accepted by both peers and Webrtc session is creating.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"IN_PROGRESS"'),"             : Call in progress",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"ENDED"'),"                   : Call ended.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"NO_CALL"'),"                 : Initial state. No call active.  ")),Object(o.b)("p",null,"After call completed and your logic finished for video help, you should unsubscribe from CallState event bu using following method.a\u015fa\u011f\u0131daki metod ile unsubscribe olabilirsiniz."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"@objc open func unsubscribeToCallStateWithTxCodeEvent()\n")),Object(o.b)("p",null,"You can see complete code sample that you need to implement below. You should show wait screen after getting ",Object(o.b)("strong",{parentName:"p"},"true")," from ",Object(o.b)("strong",{parentName:"p"},"result")," callback. If you receive ",Object(o.b)("strong",{parentName:"p"},"false"),", there is an error in the system and you should show error screen to customer."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'var attachedData = [ACAttachedData]()\nattachedData.append(ACAttachedData.init(nsString: "dataName1", with: "dataValue1"))\nattachedData.append(ACAttachedData.init(nsString: "dataName2", with: "dataValue2"))\nattachedData.append(ACAttachedData.init(nsString: "dataName3", with: "dataValue3"))\nattachedData.append(ACAttachedData.init(nsString: "dataName4", with: "dataValue4"))\n\nDiyalogEngine.diyalogInstance().startVideoCallWithAttachedDataInBackground(\n    idNumber: Int64("<CUSTOMER_NATIONAL_ID_NUMBER") ?? 0, \n    customerId: "<CUSTOMER_NO>", \n    customerName: "<CUSTOMER_NAME>", \n    txCode : "<YOUR_TX_CODE>", \n    attachedData: attachedData, result: {(success, errorMessage) in\n        if(success)\n        {\n            // SHOW YOUR WAIT RECRESENTATIVE SCREEN\n            DiyalogEngine.diyalogInstance().subscribeToCallStateWithTxCodeEvent(listener: {(value : String?, txCode: String?) -> Void in\n                if value != nil {\n                    print("CALL STATE CHANGED TO " + value! + " FOR TxCode : " + txCode!)\n                    if (value! == ("ENDED")){\n                        // CALL FINISHED\n                    }\n                    else if (value! == "RINGING" || value! == "CONNECTING" || value! == "IN_PROGRESS"){\n                        // CALL IN PROGRESS\n                    }\n                }\n            })\n            \n        }else{\n            print("there is an error. ErrCode : \\(String(describing: errorMessage?.getCode())). Error Msg: \\(String(describing: errorMessage?.getMsg()))")\n        }\n})\n')),Object(o.b)("p",null,"If ",Object(o.b)("strong",{parentName:"p"},"startVideoCallWithAttachedDataInBackground")," method return successfull and you showed wait screen to customer and the customer press cancel button in your wait screen before agent start video call, you should call ",Object(o.b)("strong",{parentName:"p"},"stopVideoCall")," method to stop process"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"@objc open func stopVideoCallForNewCustomer(customerId : String) -> Bool\n")),Object(o.b)("p",null,"Sample code  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'let result = DiyalogEngine.diyalogInstance().stopVideoCall(customerId: "<CUSTOMER_NO>")\n')),Object(o.b)("p",null,"After all process completed you can unsubscribe from the CallState event by calling "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"@objc open func unsubscribeToCallStateWithTxCodeEvent()\n")),Object(o.b)("p",null,"Sample code  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"DiyalogEngine.diyalogInstance().unsubscribeToCallStateWithTxCodeEvent()\n")),Object(o.b)("p",null,"Done :)  "),Object(o.b)("h3",{id:"picture-in-picture-mode"},"Picture In Picture Mode"),Object(o.b)("p",null,"Diyalog SDK has feature picture in picture mode when video or voice call in progress.\nIt is managed by other peer. It means, Diyalog App  which is used by staff (agent) can send a manage call event to the mobile app in background and call view in mobile app automatically minimized over host application as picture in picture mode. "),Object(o.b)("p",null,"When mobile app call view is mininizing, Diyalog app that used by staff can send data (command) to mobile app in background. In this way, mobile host application can start any flow by checking the data/command for the customer during video/voice call."),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"subscribeToManageCallEvent")," method is used to listen to these events. Each time a new event occurs, the callback function given to this method is called. Possible values are as follows :"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"}," ",Object(o.b)("strong",{parentName:"p"},'"NO_EVENT"'),"               : Default and initial value of the event. This event should be ignored.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"CALL_MINIMIZED"'),"          : When this event comes, it means that the video call is minimized and the desired flow can be started. There can be additional data/command in the event.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"MESSAGE_RECEIVED"'),"        : When this event comes, it means that data has been transmitted from the other application to the mobile application.  ")),Object(o.b)("p",null,"After subscription, ",Object(o.b)("strong",{parentName:"p"},'"CALL_MINIMIZED"')," event should be waited and ",Object(o.b)("strong",{parentName:"p"},"getManageCallEventData")," method should be used to read event data/command when this event comes up. You can redirect to the flow you want with the eventData you designed."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'DiyalogEngine.diyalogInstance().subscribeToManageCallEvent(listener: {(manageCallEvent : String?) -> Void in\n    if (manageCallEvent != nil && manageCallEvent == "CALL_MINIMIZED") {\n        let events = DiyalogEngine.diyalogInstance().getManageCallEventData()\n        for (key, value) in events {\n            if (key == "command" && value == "getCardPassword"){\n                // Do something\n            }\n        }\n    }\n})\n')),Object(o.b)("p",null,"When the call is ended or you don't want to listen to this event, you should unsubscribe your listener by calling ",Object(o.b)("strong",{parentName:"p"},"unsubscribeToManageCallEvent")," method."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"DiyalogEngine.diyalogInstance().unsubscribeToManageCallEvent()\n")),Object(o.b)("h3",{id:"receiving-data-from-remote-party-in-a-call"},"Receiving Data From Remote Party In a Call"),Object(o.b)("p",null,"Mobile app can receive any message or data from other party (agent or staff) during video/voice call in background. Staff or agent application can send any data/command/message to the mobile app during call in progress by means of DiyalogSDK."),Object(o.b)("p",null,"This messages can be get by subscribing to manage call events. "),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"subscribeToManageCallEvent")," method is used to listen to these events. Each time a new event occurs, the callback function given to this method is called. Possible values are as follows :"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"}," ",Object(o.b)("strong",{parentName:"p"},'"NO_EVENT"'),"               : Default and initial value of the event. This event should be ignored.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"CALL_MINIMIZED"'),"          : When this event comes, it means that the video call is minimized and the desired flow can be started. There can be additional data/command in the event.",Object(o.b)("br",{parentName:"p"}),"\n","",Object(o.b)("strong",{parentName:"p"},'"MESSAGE_RECEIVED"'),"        : When this event comes, it means that data has been transmitted from the other application to the mobile application.  ")),Object(o.b)("p",null,"After subscription, ",Object(o.b)("strong",{parentName:"p"},'"MESSAGE_RECEIVED"')," event should be waited and ",Object(o.b)("strong",{parentName:"p"},"getManageCallEventData")," method should be used to read event data/command when this event comes up. You can redirect to the flow you want with the eventData you designed."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'DiyalogEngine.diyalogInstance().subscribeToManageCallEvent(listener: {(manageCallEvent : String?) -> Void in\n    print("MANAGECALLEVENT received. event : \\(manageCallEvent)")\n    if (manageCallEvent != nil && (manageCallEvent == "MESSAGE_RECEIVED") ) {\n        let events = DiyalogEngine.diyalogInstance().getManageCallEventData()\n        for (key, value) in events {\n            print("MANAGECALLEVENT key : \\(key) value : \\(value)")\n            if (key == "command" && value == "getCardPassword"){\n                // Do something\n            }\n        }\n    }\n})\n')),Object(o.b)("h3",{id:"sending-data-to-remote-party-in-a-call"},"Sending Data To Remote Party In a Call"),Object(o.b)("p",null,"You can send any data from mobile app to remote staff or agent app by means of DiyalogSDK during call."),Object(o.b)("p",null,"For doing this, you can call below method with eventData array."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"@objc open func sendMessageToRemote(eventData : [ACEventData], result: @escaping (Bool, String) -> Void)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ACEventData")," stores keyName and keyValue strings. This data is transfered to remote by calling sendMessageToRemote method."),Object(o.b)("p",null,"Sample usage :"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'var eventData = [ACEventData]()\neventData.append(ACEventData.init(nsString: "processName", with: "CustOnboarding"))\neventData.append(ACEventData.init(nsString: "processState", with: "customer_approve_by_pin"))\n\nDiyalogEngine.diyalogInstance().sendMessageToRemote(\n                      eventData: eventData, \n                      result: {(success, resMessage) in\n        print("sendMessageToRemote finished. isSuccess: \\(success), resMessage: \\(resMessage)")\n})\n')),Object(o.b)("p",null,"In this sample code remote peer (agent / staff app) will receive following json object. Sending a message to the remote peer is only possible during call."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},"{\n      eventType: 'sendMessage',   \n      manageCallEventData: [  \n          {dataName: 'processName', dataValue: 'CustOnboarding'},  \n          {dataName: 'processState', dataValue: 'customer_approve_by_pin'}  \n      ]  \n}  \n")),Object(o.b)("h3",{id:"sample-ios-project"},"Sample IOS project"),Object(o.b)("p",null,"You can download full simple video call ios project from ",Object(o.b)("a",{parentName:"p",href:"https://diyalog.im/app/pkgs/demoapps/SimpleVideoCall_IOS.zip"},"SimpleVideoCall_IOS")," link."))}j.isMDXComponent=!0},152:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(a),p=n,m=d["".concat(l,".").concat(p)]||d[p]||u[p]||o;return a?r.a.createElement(m,i(i({ref:t},s),{},{components:a})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},153:function(e,t,a){"use strict";a.d(t,"b",(function(){return o})),a.d(t,"a",(function(){return l}));var n=a(16),r=a(154);function o(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(n.default)();return{withBaseUrl:(a,n)=>function(e,t,a,{forcePrependBaseUrl:n=!1,absolute:o=!1}={}){if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(n)return t+a;const l=a.startsWith(t)?a:t+a.replace(/^\//,"");return o?e+l:l}(t,e,a,n)}}function l(e,t={}){const{withBaseUrl:a}=o();return a(e,t)}},154:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},213:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/video_help_flow-af3b0e18b96ca5a82070239e2114674e.png"}}]);