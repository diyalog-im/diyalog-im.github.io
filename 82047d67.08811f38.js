(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{163:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(1),s=t(9),o=(t(198),t(197)),r={id:"android_tokenBaseAuth",title:"Token Base Authentication",sidebar_label:"Token Base Authentication"},i={id:"android_tokenBaseAuth",title:"Token Base Authentication",description:"Token base auth is system that customer can register into Diyalog sdk with their application User Info, and can chat between thier application user. \r",source:"@site/../docs/android_tokenBaseAuth.md",permalink:"/docs/android_tokenBaseAuth",sidebar_label:"Token Base Authentication",sidebar:"docs",previous:{title:"Android SDK of Diyalog Messaging Platform",permalink:"/docs/android_getting_started"},next:{title:"Diyalog Android SDK Style",permalink:"/docs/android_style"}},l=[{value:"Domain Customer User",id:"domain-customer-user",children:[]},{value:"Domain Staff User",id:"domain-staff-user",children:[]},{value:"Get Active sessions",id:"get-active-sessions",children:[]},{value:"Messaging from specific User",id:"messaging-from-specific-user",children:[]},{value:"Delete session of user",id:"delete-session-of-user",children:[]},{value:"Get total unread count into main application.",id:"get-total-unread-count-into-main-application",children:[]}],c={rightToc:l};function u(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Token base auth is system that customer can register into Diyalog sdk with their application User Info, and can chat between thier application user. "),Object(o.b)("p",null,"With DiyalogSDK User can register in forground mode as well as background mode. Before authentication user need to init DiyalogSDK as below."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"   DiyalogEngine.diyalogInstance().Initialize(getApplicationContext());\n   DiyalogEngine.diyalogInstance().waitForReady();\n")),Object(o.b)("h2",{id:"domain-customer-user"},"Domain Customer User"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"a. Foreground method")),Object(o.b)("p",null,"For customer user registration client need to call below method with necessary information. After successfully register on server it will create session in Diyalog SDK and can start messaging. Using below method if user already created session in Diyalog SDK, then it will directly open that session and user can start messaging."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"})," DiyalogEngine.diyalogInstance().startTokenAuth(context,dlgToken,deviceId,\n                               customerId,customerName, customerPhone, customerEmail); \n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"context")," - Activity context"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"dlgToken")," - Main application server will return Diyalog Token when user will login into main application\n",Object(o.b)("strong",{parentName:"p"},"DeviceId")," - domain specific device id. this is for domain validation"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"CustId")," - domain customer id"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"CustName")," - customer name"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"CustPhone")," -  customer phone number (Optional)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"CustEmail")," \u2013 customer email address (Optional)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"b. Background method")),Object(o.b)("p",null,"When customer user will call background method then it will be register on server and after successfully register, it will create session into sdk.\nAnd when user will click on Diyalog chat icon from main application to open sdk, it will directly open that session. user does not wait for register.\nAnd In background method if there is any failure then it will pass error message into failure callback."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),' DiyalogEngine.diyalogInstance().startTokenAuthInBackground(context,dlgToken,deviceId,\n                               customerId,customerName, customerPhone, customerEmail, new TokenAuthResponse() {\n                    @Override\n                    public void success() {\n                        Log.e("Auth In Bakground","==>> Success ");\n                       \n                    }\n\n                    @Override\n                    public void failure(TokenAuthError tokenAuthError) {\n                        Log.e("Auth In Bakground", "==>> Error Message: " + tokenAuthError.getErrorMsg());\n                        Log.e("Auth In Bakground", "==>> Error Code: "+  tokenAuthError.getErrorCode());\n                    }\n                }) ;\n')),Object(o.b)("h2",{id:"domain-staff-user"},"Domain Staff User"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"a. Foreground method")),Object(o.b)("p",null,"For staff user registration client need to call below method with necessary information. After successfully register on server it will create session in Diyalog SDK and can start messaging. Using below method if user already created session in Diyalog SDK, then it will directly open that session and user can start messaging."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"   DiyalogEngine.diyalogInstance().startDomainUserTokenAuth( context,  dlgToken,   sessionId,\n                                         userId,\n                                         userName,\n                                         userPhone,\n                                         userEmail);\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"context")," - Activity context"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"dlgToken")," - Main application server will return Diyalog Token when user will login into main application"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"sessionId")," \u2013 Staff user's sessionId"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"userId")," - Staff user's UserID"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"UserName")," - Staff user's UserName"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"userPhone"),"  - Staff user's PhoneNumber(Optional)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"userEmail")," - Staff user's EmailID (Optional)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"b. Background method"),"\nWhen staff user will call background method then it will be register on server and after successfully register, it will create session into sdk.\nAnd when user will click on Diyalog chat icon from main application to open sdk, it will directly open that session. user does not wait for register.\nAnd In background method if there is any failure then it will pass error message into failure callback."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),' DiyalogEngine.diyalogInstance().startDomainUserTokenAuthInBackground(context,  dlgToken,   sessionId, userId,\n                                         userName, userPhone, userEmail, new TokenAuthResponse() {\n                    @Override\n                    public void success() {\n                        Log.e("Auth In Bakground","==>> Success ");\n                       \n                    }\n\n                    @Override\n                    public void failure(TokenAuthError tokenAuthError) {\n                        Log.e("Auth In Bakground", "==>> Error Message: " + tokenAuthError.getErrorMsg());\n                        Log.e("Auth In Bakground", "==>> Error Code: "+  tokenAuthError.getErrorCode());\n                    }\n                }) ;\n')),Object(o.b)("h2",{id:"get-active-sessions"},"Get Active sessions"),Object(o.b)("p",null,"User can get all sessions list those already registered in diyalog SDK. This method will be use for both Domain customer user and staff user."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"ArrayList<AccountVo> sessionList = DiyalogEngine.diyalogInstance().getActiveSessions();\n")),Object(o.b)("p",null,"This method will return list of saved session from sdk.\nIt will contain userInfo as below:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ApplicationUserID"),Object(o.b)("li",{parentName:"ul"},"AuthID"),Object(o.b)("li",{parentName:"ul"},"UserName"),Object(o.b)("li",{parentName:"ul"},"User Image."),Object(o.b)("li",{parentName:"ul"},"User is active or not"),Object(o.b)("li",{parentName:"ul"},"Unread message count")),Object(o.b)("h2",{id:"messaging-from-specific-user"},"Messaging from specific User"),Object(o.b)("p",null,"User can start messaging from specific user. If session already saved into Diyalog SDK then user can start messaging with thier UserID. "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"DiyalogEngine.diyalogInstance().startMessagingWithUserId(context,customerId);\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"context")," - Activity context"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"customerId")," -  domain customer id"),Object(o.b)("p",null,"This method will be use for both Domain customer user and staff user."),Object(o.b)("h2",{id:"delete-session-of-user"},"Delete session of user"),Object(o.b)("p",null,"Client can delete session of diyalog sdk for any user."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"boolean isDelted = DiyalogEngine.diyalogInstance().deleteSessionOfUser(customerId); \n")),Object(o.b)("h2",{id:"get-total-unread-count-into-main-application"},"Get total unread count into main application."),Object(o.b)("p",null,"Client can get total no of unread message count into main application, so they can set unread badge count into main application. Client need to subscribe unread count event as below:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"})," DiyalogEngine.diyalogInstance().subscribeToTotalUnreadCountEvent(new ValueChangedListener<Integer>() {\n                    @Override\n                    public void onChanged(Integer val, Value<Integer> valueModel) {\n                        unreadCount.setText(String.valueOf(val));  // unreadCount is textview for display unread message count.\n                    }\n                });\n\n")))}u.isMDXComponent=!0}}]);